
	include "nesdefs.dasm"

;;;;; VARIABLES

lvlptr	= $0

func0	= $2
func1	= $3
func2	= $4
func3	= $5
func4	= $6
func5	= $7
func6	= $8
func7	= $9

tmp0	= $a
tmp1	= $b
tmp2	= $c
tmp3	= $d

jtimer	= $e ; jump timer
Flags	= $f

px0	= $20
px1	= $21
px2	= $22
vx0	= $23
vx1	= $24
vx2	= $25
ax0	= $26
ax1	= $27
ax2	= $28

py0	= $29
py1	= $2A
py2	= $2B
vy0	= $2C
vy1	= $2D
vy2	= $2E
ay0	= $2F
ay1	= $30
ay2	= $31

angle0	= $32
angle1	= $33
angle2	= $34
omega0	= $35
omega1	= $36
omega2	= $37
relpx0	= $38
relpx1	= $39
radius	= $3A
relpy0	= $3B
relpy1	= $3C
hookpx	= $3D
hookpy	= $3E
phase	= $3F	; 0 normal, 2 searching, 3 transition1, 4 transition2, 5 hook mode

; $40-$5F are the same from last frame

lvl	= $a
lvldat	= $80

;; Physics Constants
GRAVITY	        = $006000
MAX_FALL	= $056010
JUMP_FORCE	= $030000
WALK_ACCEL	= $006a80
MAX_WALK	= $015000
PASSIVE_DECEL	= $003040
MAX_JUMP	= 9
MARGIN		= $8
WIDTH		= $5
HEIGHT		= $7

	org $0

;;;;; NES CARTRIDGE HEADER

	NES_HEADER 0,2,1,0 ; mapper 0, 2 PRGs, 1 CHR, horiz. mirror

;;;;; START OF CODE

Start:
; wait for PPU warmup; clear CPU RAM
	NES_INIT	; set up stack pointer, turn off PPU
        jsr WaitSync	; wait for VSYNC
        jsr ClearRAM	; clear RAM
        jsr WaitSync	; wait for VSYNC (and PPU warmup)
; set palette
        jsr LoadPallete
	
        lda #0
        sta PPU_SCROLL
        sta PPU_SCROLL
        
        
        jsr WaitSync
        lda #0
        sta OAM_ADDR
        sta lvl
	sta lvlptr
        lda #$a0
        sta lvlptr+1
        jsr LoadLevel
        jsr RenderLevel

        
        lda #$80
        sta PPU_CTRL
        lda #$1e	; A = $08
        sta PPU_MASK	; enable rendering 
        
        lda #0
        sta PPU_ADDR
        sta PPU_ADDR       
        ; sprite setup
	ldx #1
        stx $201
        inx
        stx $205
	inx
        stx $209
        inx
        stx $20D
        inx
        stx $211
        
        lda #$10
        sta $201
        lda #0
        sta $202
        
        lda #20
        sta px0
        lda #130
        sta py0
        
        lda #$0
        sta px1
        sta py1

	lda #$0
        sta vx1
        
        lda #$0
        sta vy0
   
	
        lda #$58
        sta hookpx
        lda #$78
        sta hookpy

   	lda #50
        sta radius
	lda #0
        sta omega0
        
        lda #$6
        sta angle0
        sta angle1
        sta angle2
        
        lda #0
        sta phase
        
.endless
        jmp .endless



NMIHandler:
     	; Update the PPU in VBlank
        ldy py0
        dey
        sty $200     
        ldy px0
        sty $203

        lda #$00
        ldx PPU_STATUS
        sta PPU_CTRL
        

        
        lda #02
        sta PPU_OAM_DMA
        
	; Backup variables from last frame
	ldx #$1f
.copyold
	lda $20,x
        sta $40,x
        dex
        bpl .copyold

	; Do physics calculations based on mode
	lda phase
        bne .n0
        jsr NormalMode
        jmp .physdone
.n0
        cmp #$05
        bne .n5
	jsr HookMode
        jmp .physdone
.n5	

.physdone

	; Read controller
	include "readpad.asm"

	lda #$80
        ldx PPU_STATUS
        sta PPU_CTRL
        rti
        
        
        
        
LoadPallete:
	PPU_SETADDR $3f00
        ldx #$0
.ld_l   lda Pallete,x
        sta PPU_DATA
        inx
        cpx #$20
        bne .ld_l
        rts

Pallete:
	.hex 3b
        .hex 0b1a07 00
        .hex 0b1a07 00
        .hex 0b1a07 00
        .hex 0b1a07 3b
        .hex 04130d 00
        .hex 000000 00
        .hex 000000 00
        .hex 000000 00
	org $a000
Level:
	;.byte $20, $83, $6f, $21, $06, $65, %11010000, $20, $71, $66, %11100000, $20, $f4, $82, %11010000
        ;.byte $21, $55, $25, %11000000, $21, $d5, $15, %11100100, $22, $43, $63, $22, $2f, $61
        ;.byte $85, $eb, $86, $16
        .byte $22, $22, $55, $22, $38, $55, $85, $2e
        .byte $0
        

;;;;; COMMON SUBROUTINES

NegativeAclX:
	clc
        lda ax2
        eor #$ff
        adc #1
        sta ax2
        lda ax1
        eor #$ff
        adc #0
        sta ax1
        lda ax0
        eor #$ff
        adc #0
        sta ax0
        rts
        

        include "physics.asm"
	include "hookmode.asm"     
	include "math.asm"

        
	include "level.asm"

	include "nesppu.dasm"	
	
        ; math look up tables
        org $b000
        include "sinetable.asm"    
	include "pythtantable.asm"


;;;;; CPU VECTORS

	NES_VECTORS

CHR:
	incbin "chars.chr"